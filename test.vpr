import hello;

namespace Foo {
    global x: i32 = 500;
}

/*
    Very advanced node data structure
*/
using struct Node {
    next: struct Node*;
}

func @wrapperFunc(balls: i32) -> void =
    Foo::x = balls;

func @getterFunc(balls: i32) -> i32 =
    Foo::x + balls;

func @main() -> i32 {
    let test: Hello::struc = struct Hello::Test { 1, 2 };

    let var: i32 = sizeof(Hello::struc);
    while (true) {
        if (var + 1 == Foo::x) break;
        var += 1;
    }

    let viperIsGood: bool;
    let choice: i32 = 2;
    switch (choice) {
        case 0:
        case 1:
            viperIsGood = false;
            break;
        case 2:
            viperIsGood = true;
            break;
        default:
            viperIsGood = true;
            break;
    }

    let enumTest: Hello::TestEnum = Hello::TestEnum::B;

    testing();
    let blah: u32 = Hello::Ball::balls();

    return test.pubMethod(var);
}