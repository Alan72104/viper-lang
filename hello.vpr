namespace Hello {
    namespace Ball {
        export func @balls() -> u32 = 6;
    }

    export func @hello() -> i32 = 69;

    export using struct Test {
        field: i32;
        private another: i32;
        
        func @pubMethod(balls: i32) -> i32;
        private func @method(balls: i32) -> i32;
        private func @wrapperMethod(balls: i32) -> void;
    }

    func Test@pubMethod(balls: i32) -> i32 {
        this->another = 0;
        return this->method(balls);
    }

    func Test@method(balls: i32) -> i32 =
        this->another + balls;

    func Test@wrapperMethod(balls: i32) -> void =
        this->another = this->another + balls;

    export using struc = Test;

    export enum TestEnum {
        A = 500,
        B
    }
}

[[NoMangle]]
export func @testing() -> void {
    return;
}